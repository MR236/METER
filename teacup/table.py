""" Functions for generating multi-state life tables """
import wrangler as wr
import numpy as np
import pandas as pd


def atrisk_and_transitions(data, transition_names, states):
    """
    Get the number of individuals in a given state at a given age, and number of transitions at each age.

    Parameters
    ----------

    data: the data in wide format as generated by wide_format function

    transition_names: a list of the names of the columns that contain the transition years
    ex. ['Birth', 'First_Film', 'Death'] with first taken as study entry

    states: the names of the states in the model, the entry into each of which should
    correspond to the columns in transition_names

    Returns
    ----------

    a two element list with:
    - first element a dataframe containing the risk sets for each year
    - second element a dataframe containing the number of transitions of each type in each year

    """
    t_statuses = ['{}_status'.format(a) for a in transition_names]
    t_ages = ['{}_age'.format(a) for a in transition_names]
    column_positions = {}
    for i in range(0, len(data.columns)):
        column_positions[data.columns[i]] = i
    for i in range(0, len(transition_names)):
        t_statuses[i] = column_positions[t_statuses[i]]
        t_ages[i] = column_positions[t_ages[i]]
    max_age = data['final age'].max() # need the final age so we know how many age specific arrays needed
    row_list = wr.df_to_list(data)
    allowable_transitions = wr.allowed_transitions(states)
    transitions = []
    at_risk = []
    for i in range(0, max_age+1): # create an array containing the number of people in each state for every age in the study
        at_risk.append([])
        transitions.append([[0 for x in range(len(states))] for y in range(len(states))])
    for i in at_risk:
        for z in states:
            i.append(0)
    at_risk[0][0] = len(data) # initially, everyone is in state 1
    for i in row_list:
        current_state = 0
        perf_max_age = i[column_positions["final age"]]
        n = 1
        while n <= perf_max_age:
            at_risk[n][current_state] += 1
            for z in range(current_state, len(states)):
                if i[t_ages[z]] == n and i[t_statuses[z]] == 1:
                    transitions[n][current_state][z] += 1
                    current_state = z
            n += 1
    riskdf = pd.DataFrame(at_risk, columns=states)
    riskdf.index.name = 'age'
    transitionsdf = []
    for z in range(0, max_age+1):
        translst = []
        for i in allowable_transitions:
            translst.append(transitions[z][i[0]][i[1]])
        transitionsdf.append(translst)
    names = []
    for i in allowable_transitions:
        names.append(states[i[0]] + "->" + states[i[1]])
    transdf = pd.DataFrame(transitionsdf, columns=names)
    transdf.index.name = 'age'
    return([riskdf, transdf])


